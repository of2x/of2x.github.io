import{_ as t,c as a,o as e,a1 as r}from"./chunks/framework.biRBrEtS.js";const p=JSON.parse('{"title":"第一部分：数据系统基础","description":"","frontmatter":{},"headers":[],"relativePath":"part-i.md","filePath":"part-i.md"}'),h={name:"part-i.md"},l=r('<h1 id="第一部分-数据系统基础" tabindex="-1">第一部分：数据系统基础 <a class="header-anchor" href="#第一部分-数据系统基础" aria-label="Permalink to &quot;第一部分：数据系统基础&quot;">​</a></h1><p>本书前四章介绍了数据系统底层的基础概念，无论是在单台机器上运行的单点数据系统，还是分布在多台机器上的分布式数据系统都适用。</p><ol><li><a href="./ch1.html">第一章</a> 将介绍本书使用的术语和方法。<strong>可靠性，可伸缩性和可维护性</strong> ，这些词汇到底意味着什么？如何实现这些目标？</li><li><a href="./ch2.html">第二章</a> 将对几种不同的 <strong>数据模型和查询语言</strong> 进行比较。从程序员的角度看，这是数据库之间最明显的区别。不同的数据模型适用于不同的应用场景。</li><li><a href="./ch3.html">第三章</a> 将深入 <strong>存储引擎</strong> 内部，研究数据库如何在磁盘上摆放数据。不同的存储引擎针对不同的负载进行优化，选择合适的存储引擎对系统性能有巨大影响。</li><li><a href="./ch4.html">第四章</a> 将对几种不同的 <strong>数据编码</strong> 进行比较。特别研究了这些格式在应用需求经常变化、模式需要随时间演变的环境中表现如何。</li></ol><p>第二部分将专门讨论在 <strong>分布式数据系统</strong> 中特有的问题。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ol><li><a href="./ch1.html">可靠性、可伸缩性和可维护性</a></li><li><a href="./ch2.html">数据模型与查询语言</a></li><li><a href="./ch3.html">存储与检索</a></li><li><a href="./ch4.html">编码与演化</a></li></ol><hr><table><thead><tr><th>上一章</th><th>目录</th><th>下一章</th></tr></thead><tbody><tr><td><a href="./preface.html">序言</a></td><td><a href="./README.html">设计数据密集型应用</a></td><td><a href="./ch1.html">第一章：可靠性、可伸缩性和可维护性</a></td></tr></tbody></table>',8),o=[l];function i(s,n,c,d,_,f){return e(),a("div",null,o)}const g=t(h,[["render",i]]);export{p as __pageData,g as default};
