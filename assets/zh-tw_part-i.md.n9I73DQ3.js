import{_ as t,c as a,o as e,a1 as r}from"./chunks/framework.biRBrEtS.js";const p=JSON.parse('{"title":"第一部分：資料系統基礎","description":"","frontmatter":{},"headers":[],"relativePath":"zh-tw/part-i.md","filePath":"zh-tw/part-i.md"}'),h={name:"zh-tw/part-i.md"},l=r('<h1 id="第一部分-資料系統基礎" tabindex="-1">第一部分：資料系統基礎 <a class="header-anchor" href="#第一部分-資料系統基礎" aria-label="Permalink to &quot;第一部分：資料系統基礎&quot;">​</a></h1><p>本書前四章介紹了資料系統底層的基礎概念，無論是在單臺機器上執行的單點資料系統，還是分佈在多臺機器上的分散式資料系統都適用。</p><ol><li><a href="./ch1.html">第一章</a> 將介紹本書使用的術語和方法。<strong>可靠性，可伸縮性和可維護性</strong> ，這些詞彙到底意味著什麼？如何實現這些目標？</li><li><a href="./ch2.html">第二章</a> 將對幾種不同的 <strong>資料模型和查詢語言</strong> 進行比較。從程式設計師的角度看，這是資料庫之間最明顯的區別。不同的資料模型適用於不同的應用場景。</li><li><a href="./ch3.html">第三章</a> 將深入 <strong>儲存引擎</strong> 內部，研究資料庫如何在磁碟上擺放資料。不同的儲存引擎針對不同的負載進行最佳化，選擇合適的儲存引擎對系統性能有巨大影響。</li><li><a href="./ch4.html">第四章</a> 將對幾種不同的 <strong>資料編碼</strong> 進行比較。特別研究了這些格式在應用需求經常變化、模式需要隨時間演變的環境中表現如何。</li></ol><p>第二部分將專門討論在 <strong>分散式資料系統</strong> 中特有的問題。</p><h2 id="目錄" tabindex="-1">目錄 <a class="header-anchor" href="#目錄" aria-label="Permalink to &quot;目錄&quot;">​</a></h2><ol><li><a href="./ch1.html">可靠性、可伸縮性和可維護性</a></li><li><a href="./ch2.html">資料模型與查詢語言</a></li><li><a href="./ch3.html">儲存與檢索</a></li><li><a href="./ch4.html">編碼與演化</a></li></ol><hr><table><thead><tr><th>上一章</th><th>目錄</th><th>下一章</th></tr></thead><tbody><tr><td><a href="./preface.html">序言</a></td><td><a href="./README.html">設計資料密集型應用</a></td><td><a href="./ch1.html">第一章：可靠性、可伸縮性和可維護性</a></td></tr></tbody></table>',8),o=[l];function i(s,n,c,d,_,f){return e(),a("div",null,o)}const g=t(h,[["render",i]]);export{p as __pageData,g as default};
